import csv
import pandas as pd
import os
import json
import pytz
import logging

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.dispatcher.handler import CancelHandler
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from utils.config import bot_token, PROFILE_DIR, STORAGE_DIR
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from datetime import datetime, timedelta
from utils.ai_tools import create_meal_and_coocking_plan

logging.basicConfig(level=logging.INFO)

bot = Bot(token=bot_token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
scheduler = AsyncIOScheduler()

if not os.path.exists(STORAGE_DIR):
    os.makedirs(STORAGE_DIR)
    os.makedirs(os.path.join(STORAGE_DIR, "feedback"))
CSV_FILE = os.path.join(STORAGE_DIR, 'user_data.csv')
if not os.path.exists(CSV_FILE):
    columns = ["user_id", "meal_plan_link", "user_info_file", "cook_file_path"]
    df = pd.DataFrame(columns=columns)

    df.to_csv(CSV_FILE, index=False)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV
def load_registered_users():
    users = set()
    if os.path.exists(CSV_FILE):
        users_info = pd.read_csv(CSV_FILE)
        for _, row in users_info.iterrows():
                users.add(int(row['user_id']))
    return users


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JSON
def load_user_profile(user_id):
    profile_file_path = os.path.join(PROFILE_DIR, f'user_{user_id}.json')
    if os.path.exists(profile_file_path):
        with open(profile_file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ CSV
def add_user_to_csv(user_id, profile_file_path, meal_plan_link='', shopping_schedule_link=''):
    user_found = False

    users_info = pd.read_csv(CSV_FILE)
    for _, row in users_info.iterrows():
        if int(row['user_id']) == user_id:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–µ
            row['plan_file_path'] = meal_plan_link
            row['cook_file_path'] = shopping_schedule_link
            user_found = True

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CSV, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    if not user_found:
        new_user = pd.DataFrame({"user_id": [user_id], "meal_plan_link": [meal_plan_link],
                                "user_info_file": [profile_file_path], "cook_file_path": [shopping_schedule_link]})
        users_info = pd.concat([users_info, new_user], ignore_index=True)
        
    users_info.to_csv(CSV_FILE)

    logging.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (user_id: {user_id}) —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ CSV.")


registered_users = load_registered_users()


user_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
user_keyboard.row(
    KeyboardButton("/start üè†"),
    KeyboardButton("/edit_profile ‚úèÔ∏è")
)
user_keyboard.row(
    KeyboardButton("/generate_plan üìù"),
    KeyboardButton("/delete_plan ‚ùå")
)
user_keyboard.row(
    KeyboardButton("/edit_plan üõ†Ô∏è"),
    KeyboardButton("/view_plan üëÄ")
)
user_keyboard.row(
    KeyboardButton("/list_reminders ‚è∞"),
)


class RegistrationForm(StatesGroup):
    about_user = State()  # –ü–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, —Ü–µ–ª—å –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
    forbidden_products = State()  # –ê–ª–ª–µ—Ä–≥–∏–∏, –Ω–µ–ª—é–±–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    favorite_products = State()  # –õ—é–±–∏–º–∞—è –µ–¥–∞
    cooking_preferences = State()  # –í—Ä–µ–º—è –Ω–∞ –≥–æ—Ç–æ–≤–∫—É –∏ —Å–ø–æ—Å–æ–±—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è


class EditProfileForm(StatesGroup):
    choose_field = State()  # –í—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    new_value = State()  # –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è


class PlanEditForm(StatesGroup):
    new_prompt = State()  # –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞
    
    
class FeedbackForm(StatesGroup):
    quality = State()  # –í–æ–ø—Ä–æ—Å –æ –∫–∞—á–µ—Å—Ç–≤–µ
    usability = State()  # –í–æ–ø—Ä–æ—Å –æ–± —É–¥–æ–±—Å—Ç–≤–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    compliance = State()  # –í–æ–ø—Ä–æ—Å –æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º


# Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationMiddleware(BaseMiddleware):
    async def on_pre_process_message(self, message: Message, data: dict):
        user_id = message.from_user.id
        state = dp.current_state(user=user_id)
        current_state = await state.get_state()
        if user_id not in registered_users and not current_state:
            keyboard = InlineKeyboardMarkup()
            register_button = InlineKeyboardButton("Register", callback_data="register")
            keyboard.add(register_button)

            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:",
                                 reply_markup=keyboard)

            raise CancelHandler()


dp.middleware.setup(RegistrationMiddleware())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id

    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è ü•ó")

    if user_id in registered_users:
        profile = load_user_profile(user_id)
        if profile:
            profile_text = (
                f"üìã –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
                f"üë• –ü–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, —Ü–µ–ª—å: {profile.get('about_user', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"‚ò† –ê–ª–ª–µ—Ä–≥–∏–∏ –∏ –Ω–µ–ª—é–±–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã: {profile.get('forbidden_products', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"üç≤ –õ—é–±–∏–º–∞—è –µ–¥–∞: {profile.get('favorite_products', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"‚è≤Ô∏è –í—Ä–µ–º—è –Ω–∞ –≥–æ—Ç–æ–≤–∫—É –∏ —Å–ø–æ—Å–æ–±—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: {profile.get('cooking_preferences', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}"
            )
            await message.answer(profile_text, reply_markup=user_keyboard)
        else:
            keyboard = InlineKeyboardMarkup()
            register_button = InlineKeyboardButton("Register", callback_data="register")
            keyboard.add(register_button)
            await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=keyboard)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        keyboard = InlineKeyboardMarkup()
        register_button = InlineKeyboardButton("Register", callback_data="register")
        keyboard.add(register_button)
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:",
                             reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data == 'start')
async def process_start_button(callback_query: types.CallbackQuery):
    await cmd_start(callback_query.message)
    await bot.answer_callback_query(callback_query.id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "Register"
@dp.callback_query_handler(lambda c: c.data == 'register')
async def process_register(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if user_id not in registered_users:
        await bot.send_message(user_id,
                               "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç –∏ —Ü–µ–ª—å –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: "
                               "–ú—É–∂—á–∏–Ω–∞, 25, –ù–∞–±–æ—Ä –º–∞—Å—Å—ã):")
        await RegistrationForm.about_user.set()  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é FSM
    else:
        await bot.send_message(user_id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

    await bot.answer_callback_query(callback_query.id)


# –®–∞–≥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.message_handler(state=RegistrationForm.about_user)
async def process_about_user(message: types.Message, state: FSMContext):
    await state.update_data(about_user=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ, –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞–ª–ª–µ—Ä–≥–∏–∏ –∏–ª–∏ –Ω–µ–ª—é–±–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
    await RegistrationForm.forbidden_products.set()


@dp.message_handler(state=RegistrationForm.forbidden_products)
async def process_forbidden_products(message: types.Message, state: FSMContext):
    await state.update_data(forbidden_products=message.text)
    await message.answer("–ö–∞–∫–∞—è —É –≤–∞—Å –ª—é–±–∏–º–∞—è –µ–¥–∞?")
    await RegistrationForm.favorite_products.set()


@dp.message_handler(state=RegistrationForm.favorite_products)
async def process_favorite_products(message: types.Message, state: FSMContext):
    await state.update_data(favorite_products=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–µ–ª—è—Ç—å –≥–æ—Ç–æ–≤–∫–µ –∏ –∫–∞–∫–∏–µ —Å–ø–æ—Å–æ–±—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —É –≤–∞—Å –∏–º–µ—é—Ç—Å—è?")
    await RegistrationForm.cooking_preferences.set()


@dp.message_handler(state=RegistrationForm.cooking_preferences)
async def process_cooking_preferences(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await state.update_data(cooking_preferences=message.text)
    user_data = await state.get_data()

    profile_data = {
        'about_user': user_data['about_user'],
        'forbidden_products': user_data['forbidden_products'],
        'favorite_products': user_data['favorite_products'],
        'cooking_preferences': user_data['cooking_preferences']
    }

    if not os.path.exists(PROFILE_DIR):
        os.makedirs(PROFILE_DIR)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ JSON
    profile_file_path = os.path.join(PROFILE_DIR, f'user_{user_id}.json')
    with open(profile_file_path, 'w', encoding='utf-8') as f:
        json.dump(profile_data, f, ensure_ascii=False, indent=4)

    add_user_to_csv(user_id, profile_file_path)
    registered_users.add(user_id)

    await state.finish()

    await message.answer(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.",
        reply_markup=user_keyboard
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /edit_profile
@dp.message_handler(commands=['edit_profile'])
async def cmd_edit_profile(message: types.Message):
    user_id = message.from_user.id
    if user_id not in registered_users:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        return
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–ü–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, —Ü–µ–ª—å", callback_data="edit_about_user"),
        InlineKeyboardButton("–ê–ª–ª–µ—Ä–≥–∏–∏ –∏ –Ω–µ–ª—é–±–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã", callback_data="edit_forbidden_products"),
        InlineKeyboardButton("–õ—é–±–∏–º–∞—è –µ–¥–∞", callback_data="edit_favorite_products"),
        InlineKeyboardButton("–í—Ä–µ–º—è –Ω–∞ –≥–æ—Ç–æ–≤–∫—É –∏ —Å–ø–æ—Å–æ–±—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è", callback_data="edit_cooking_preferences")
    )
    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=keyboard)
    await EditProfileForm.choose_field.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query_handler(state=EditProfileForm.choose_field)
async def process_edit_field_choice(callback_query: types.CallbackQuery, state: FSMContext):
    field_map = {
        "edit_about_user": "about_user",
        "edit_forbidden_products": "forbidden_products",
        "edit_favorite_products": "favorite_products",
        "edit_cooking_preferences": "cooking_preferences"
    }

    chosen_field = callback_query.data
    if chosen_field in field_map:
        await state.update_data(field_to_edit=field_map[chosen_field])
        await bot.send_message(callback_query.from_user.id,
                               f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è \"{field_map[chosen_field]}\":")
        await EditProfileForm.new_value.set()
    else:
        await bot.send_message(callback_query.from_user.id, "–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        await state.finish()

    await bot.answer_callback_query(callback_query.id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
@dp.message_handler(state=EditProfileForm.new_value)
async def process_new_value(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    new_value = message.text
    user_data = await state.get_data()

    field_to_edit = user_data.get("field_to_edit")
    if not field_to_edit:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.finish()
        return

    # –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profile = load_user_profile(user_id)
    if not profile:
        await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.")
        await state.finish()
        return

    # –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å –Ω–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    profile[field_to_edit] = new_value

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    profile_file_path = os.path.join(PROFILE_DIR, f'user_{user_id}.json')
    with open(profile_file_path, 'w', encoding='utf-8') as f:
        json.dump(profile, f, ensure_ascii=False, indent=4)

    await message.answer(f"–ü–æ–ª–µ \"{field_to_edit}\" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ \"{new_value}\".")
    await state.finish()


@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    help_text = (
        "‚ùì –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/edit_profile - –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è\n"
        "/generate_plan - –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –∏ –≥—Ä–∞—Ñ–∏–∫ –ø–æ–∫—É–ø–æ–∫\n"
        "/delete_plan - –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
    )
    await message.answer(help_text)
    
    
week_days = {
    '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 0,
    '–í—Ç–æ—Ä–Ω–∏–∫': 1,
    '–°—Ä–µ–¥–∞': 2,
    '–ß–µ—Ç–≤–µ—Ä–≥': 3,
    '–ü—è—Ç–Ω–∏—Ü–∞': 4,
    '–°—É–±–±–æ—Ç–∞': 5,
    '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 6
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–ª–æ–∫–æ–≤ –¥–Ω–µ–π
def generate_blocks_from_schedule(shopping_schedule):
    blocks = []
    total_days = len(shopping_schedule)
    days_per_block = 7 // total_days  # —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –∫–∞–∂–¥–æ–º –±–ª–æ–∫–µ
    start_day = 0

    for i in range(total_days):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –±—É–¥–µ—Ç –≤ —Ç–µ–∫—É—â–µ–º –±–ª–æ–∫–µ
        end_day = start_day + days_per_block - 1
        if i == total_days - 1:  # –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ
            end_day = 6  # –¥–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –±–ª–æ–∫–∞
        block_days = list(week_days.keys())[start_day:end_day+1]
        blocks.append(f"{block_days[0]}-{block_days[-1]}")

        start_day = end_day + 1  # —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º –¥–Ω–µ

    return blocks

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –±–ª–æ–∫–æ–≤
def create_reminders_for_shopping_schedule(user_id, shopping_schedule):
    reminders = []
    today = datetime.now(pytz.timezone("Europe/Moscow"))

    blocks = generate_blocks_from_schedule(shopping_schedule)

    for i in range(len(blocks)):
        block = blocks[i]
        days = block.split('-')
        start_day = days[0]

        # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π start_day –≤ –±—É–¥—É—â–µ–º
        start_day_week = week_days[start_day]
        delta_days = (start_day_week - today.weekday()) % 7
        first_day_of_block = today + timedelta(days=delta_days)
        first_day_of_block = first_day_of_block.replace(hour=9, minute=0, second=0, microsecond=0)

        # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        reminder = {
            "date": first_day_of_block,
            "message": f"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –ø–æ–∫—É–ø–∫–∞—Ö –¥–ª—è –±–ª–æ–∫–∞ {block}:\n{shopping_schedule[i]}",
            "user_id": user_id  # –¥–æ–±–∞–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –º–µ—Ç–∫–æ–π user_id
        scheduler.add_job(
            send_reminder,
            CronTrigger(year='*', month='*', day='*', hour='23', minute='0', second='0', day_of_week=str(first_day_of_block.weekday())),
            args=[reminder["message"]],
            id=f"reminder_{user_id}_{block}",  # –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏
            replace_existing=True  # –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–Ω–∞ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞
        )

        reminders.append(reminder)

    return reminders

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def restart_scheduler():
    if scheduler.running:
        scheduler.shutdown(wait=False)  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
    scheduler.start()  # –ù–æ–≤—ã–π –∑–∞–ø—É—Å–∫

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def schedule_reminders(reminders):
    
    for reminder in reminders:
        scheduler.add_job(
            send_reminder, 
            CronTrigger(year='*', month='*', day='*', hour='22', minute='30', second='0', day_of_week=str(reminder['date'].weekday())),
            args=[reminder["message"]]
        )
    
    restart_scheduler()

# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_reminder(message: str):
    await bot.send_message(chat_id=message.chat.id, text=message)
    
    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_all_reminders_for_user(user_id):
    reminders = []

    for job in scheduler.get_jobs():
        if f"reminder_{user_id}_" in job.id:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ job.id —Å–æ–¥–µ—Ä–∂–∏—Ç user_id
            reminder_time = job.next_run_time
            reminder_message = job.args[0]  # –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
            reminders.append(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder_message} | –í—Ä–µ–º—è: {reminder_time.strftime('%Y-%m-%d %H:%M:%S')}")

    return reminders


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
@dp.message_handler(commands=['list_reminders'])
async def cmd_list_reminders(message: types.Message):
    user_id = message.from_user.id
    logging.info(f"Fetching all reminders for user: {user_id}")

    reminders = get_all_reminders_for_user(user_id)

    if reminders:
        # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        await message.answer("\n".join(reminders))
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
    
    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def remove_all_reminders_for_user(user_id):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º user_id
    for job in scheduler.get_jobs():
        if f"reminder_{user_id}_" in job.id:
            job.remove()

@dp.message_handler(commands=['generate_plan'])
async def cmd_generate_plan(message: types.Message):
    user_id = message.from_user.id
    logging.info(f"Handling /generate_plan command from user: {user_id}")

    if user_id not in registered_users:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω
    meal_plan_file_path = os.path.join(STORAGE_DIR, f'meal_plan_{user_id}.json')
    shopping_schedule_file_path = os.path.join(STORAGE_DIR, f'shopping_schedule_{user_id}.json')
    

    if os.path.exists(meal_plan_file_path) or os.path.exists(shopping_schedule_file_path):
        await message.answer(
            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω. –ü–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ —É–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–π —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /delete_plan."
        )
        return
    
    with open(meal_plan_file_path, 'w', encoding='utf-8') as f:
        json.dump([], f)

    with open(shopping_schedule_file_path, 'w', encoding='utf-8') as f:
         json.dump([], f)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profile = load_user_profile(user_id)
    if not profile:
        await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.")
        return

    loading_message = await message.answer("–°–æ–∑–¥–∞–µ–º –í–∞—à –ø–ª–∞–Ω ... üõí")

    meal_plan, shopping_schedule = create_meal_and_coocking_plan(user_id, user_info=profile)
    
    logging.info("Generated meal plan and shopping schedule.")

    with open(meal_plan_file_path, 'w', encoding='utf-8') as f:
        json.dump(meal_plan, f)

    with open(shopping_schedule_file_path, 'w', encoding='utf-8') as f:
         json.dump(shopping_schedule, f)
         
    # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–∫—É–ø–æ–∫
    reminders = create_reminders_for_shopping_schedule(user_id, shopping_schedule)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    await schedule_reminders(reminders)
    await message.answer(f"–°–æ–∑–¥–∞–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –¥–∞—Ç–∞–º –ø–æ–∫—É–ø–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ CSV
    add_user_to_csv(user_id, load_user_profile(user_id), meal_plan_file_path, shopping_schedule_file_path)

    await bot.delete_message(chat_id=message.chat.id, message_id=loading_message.message_id)

    await message.answer(f"–í–∞—à –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é:")
    for i in range(len(meal_plan)): 
        await message.answer(meal_plan[i], parse_mode="Markdown")
        
    await message.answer(f"–í–∞—à –≥—Ä–∞—Ñ–∏–∫ –∑–∞–∫—É–ø–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é:")
    for i in range(len(meal_plan)): 
        await message.answer(shopping_schedule[i], parse_mode="Markdown")
        
        
@dp.message_handler(commands=['view_plan'])
async def cmd_view_plan(message: types.Message):
    user_id = message.from_user.id
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –∏ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–∫—É–ø–æ–∫
    meal_plan_file_path = os.path.join(STORAGE_DIR, f'meal_plan_{user_id}.json')
    shopping_schedule_file_path = os.path.join(STORAGE_DIR, f'shopping_schedule_{user_id}.json')
    
    if not os.path.exists(meal_plan_file_path) or not os.path.exists(shopping_schedule_file_path):
        await message.answer("–í–∞—à –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /generate_plan –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞")
        return
    
    with open(meal_plan_file_path, "r", encoding="utf-8") as f:
        meal_plan = json.load(f)
        
    with open(shopping_schedule_file_path, "r", encoding="utf-8") as f:
        shopping_schedule = json.load(f)
        
    await message.answer(f"# –í–∞—à –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é:", parse_mode="Markdown")
    for i in range(len(meal_plan)): 
        await message.answer(meal_plan[i], parse_mode="Markdown")
        
    await message.answer(f"# –í–∞—à –≥—Ä–∞—Ñ–∏–∫ –∑–∞–∫—É–ø–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é:", parse_mode="Markdown")
    for i in range(len(meal_plan)): 
        await message.answer(shopping_schedule[i], parse_mode="Markdown")
    

@dp.message_handler(commands=['edit_plan'])
async def process_edit_plan(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø–ª–∞–Ω–µ:")
    await PlanEditForm.new_prompt.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞
@dp.message_handler(state=PlanEditForm.new_prompt)
async def process_new_prompt(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    new_prompt = message.text
    await state.update_data(user_prompt=new_prompt)
    await message.answer(
        "–ü—Ä–æ–º—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω")
    
    meal_plan_file_path = os.path.join(STORAGE_DIR, f'meal_plan_{user_id}.json')
    shopping_schedule_file_path = os.path.join(STORAGE_DIR, f'shopping_schedule_{user_id}.json')
    
    profile = load_user_profile(user_id)
    if not profile:
        await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.")
        return

    remove_all_reminders_for_user(user_id)
    loading_message = await message.answer("–°–æ–∑–¥–∞–µ–º –í–∞—à –ø–ª–∞–Ω ... üõí")

    meal_plan, shopping_schedule = create_meal_and_coocking_plan(user_id, user_info=profile, prompt=new_prompt)
    
    reminders = create_reminders_for_shopping_schedule(user_id, shopping_schedule)
    
    await schedule_reminders(reminders)
    await message.answer(f"–°–æ–∑–¥–∞–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –¥–∞—Ç–∞–º –ø–æ–∫—É–ø–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    logging.info("Generated meal plan and shopping schedule.")

    with open(meal_plan_file_path, 'w', encoding='utf-8') as f:
        json.dump(meal_plan, f)

    with open(shopping_schedule_file_path, 'w', encoding='utf-8') as f:
         json.dump(shopping_schedule, f)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ CSV
    add_user_to_csv(user_id, load_user_profile(user_id), meal_plan_file_path, shopping_schedule_file_path)

    await bot.delete_message(chat_id=message.chat.id, message_id=loading_message.message_id)

    await message.answer(f"–í–∞—à –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é:")
    for i in range(len(meal_plan)): 
        await message.answer(meal_plan[i], parse_mode="Markdown")
        
    await message.answer(f"–í–∞—à –≥—Ä–∞—Ñ–∏–∫ –∑–∞–∫—É–ø–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é:")
    for i in range(len(meal_plan)): 
        await message.answer(shopping_schedule[i], parse_mode="Markdown")
    await state.finish()


@dp.message_handler(commands=['delete_plan'])
async def cmd_delete_plan(message: types.Message):
    user_id = message.from_user.id

    if user_id not in registered_users:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        return

    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –∏ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–∫—É–ø–æ–∫
    meal_plan_file_path = os.path.join(STORAGE_DIR, f'meal_plan_{user_id}.json')
    shopping_schedule_file_path = os.path.join(STORAGE_DIR, f'shopping_schedule_{user_id}.json')

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if os.path.exists(meal_plan_file_path):
        os.remove(meal_plan_file_path)

    if os.path.exists(shopping_schedule_file_path):
        os.remove(shopping_schedule_file_path)

    # –û–±–Ω–æ–≤–ª—è–µ–º CSV, –æ—á–∏—â–∞—è –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    file_updated = False

    users_info = pd.read_csv(CSV_FILE)
    for _, row in users_info.iterrows():
        if int(row['user_id']) == user_id:
            row['meal_plan_file_path'] = ''
            row['cook_file_path'] = ''
            file_updated = True

    if file_updated:
        remove_all_reminders_for_user(user_id)
        await message.answer(
            "–í–∞—à —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω –∏ –≥—Ä–∞—Ñ–∏–∫ –ø–æ–∫—É–ø–æ–∫ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /generate_plan.")

        feedback_button = InlineKeyboardMarkup().add(
            InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É", callback_data="feedback_survey")
        )
        await message.answer(
            "–ú—ã –±—É–¥–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã, –µ—Å–ª–∏ –≤—ã –æ—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à —Å–µ—Ä–≤–∏—Å, –ø—Ä–æ–π–¥—è –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=feedback_button
        )
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")


@dp.callback_query_handler(lambda c: c.data == "feedback_survey")
async def start_feedback_survey(callback_query: types.CallbackQuery):
    await callback_query.message.answer(
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ä–µ—à–∏–ª–∏ –æ—Ü–µ–Ω–∏—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º.\n\n"
        "–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞ (–æ—Ç 1 –¥–æ 5):",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(str(i)) for i in range(1, 6)]],
            resize_keyboard=True,
            one_time_keyboard=True,
        )
    )
    await FeedbackForm.quality.set()  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await callback_query.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏


@dp.message_handler(state=FeedbackForm.quality)
async def feedback_quality(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
    if message.text not in ['1', '2', '3', '4', '5']:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    await state.update_data(quality=int(message.text))

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    await message.answer(
        "–û—Ü–µ–Ω–∏—Ç–µ —É–¥–æ–±—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ (–æ—Ç 1 –¥–æ 5):",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(str(i)) for i in range(1, 6)]],
            resize_keyboard=True,
            one_time_keyboard=True,
        )
    )
    await FeedbackForm.usability.set()


@dp.message_handler(state=FeedbackForm.usability)
async def feedback_usability(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
    if message.text not in ['1', '2', '3', '4', '5']:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    await state.update_data(usability=int(message.text))

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    await message.answer(
        "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª –ª–∏ –ø–ª–∞–Ω –≤–∞—à–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º? (–¥–∞/–Ω–µ—Ç):",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç")]],
            resize_keyboard=True,
            one_time_keyboard=True,
        )
    )
    await FeedbackForm.compliance.set()


@dp.message_handler(state=FeedbackForm.compliance)
async def feedback_compliance(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
    if message.text.lower() not in ['–¥–∞', '–Ω–µ—Ç']:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")
        return

    await state.update_data(compliance=message.text.lower())

    data = await state.get_data()

    feedback_summary = (
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!\n\n"
        f"1. –ö–∞—á–µ—Å—Ç–≤–æ –ø–ª–∞–Ω–∞: {data['quality']} / 5\n"
        f"2. –£–¥–æ–±—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {data['usability']} / 5\n"
        f"3. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º: {'–î–∞' if data['compliance'] == '–¥–∞' else '–ù–µ—Ç'}"
    )
    
    with open(os.path.join(STORAGE_DIR, "feedback", f"{ message.from_user.id}_feedback.txt"), "w", encoding="utf-8") as f:
        f.write(feedback_summary) 

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–∏
    await message.answer(feedback_summary, reply_markup=user_keyboard)

    await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
@dp.message_handler()
async def echo_message(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å (/help)", callback_data="cmd_help"),
    )
    await message.answer("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–º–æ—â—å"
@dp.callback_query_handler(lambda c: c.data == 'cmd_help')
async def process_help_callback(callback_query: types.CallbackQuery):
    await cmd_help(callback_query.message)
    await bot.answer_callback_query(callback_query.id)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
